import random

from actions.all_actions.common_imports_for_actions import *


class ActionUtterGreetAndIntro(Action):
    def name(self) -> Text:
        return "action_utter_greet_and_intro"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        hi_message = random.choice(["Hi!", "Hey!", "Hello!", "Hi üòÉ there!", "Hello there üòÄ"])
        intro_message = random.choice(
            [
                "I'm ResBot! üç¥, I can recommend amazing restaurants and make reservations seamless for you üåü.",
                "I'm ResBot, your dining assistant. I help find ideal restaurants and make reservations for you üåü."
            ]
        )

        sinhala_hi_message = random.choice(["‡∑Ñ‡∑è‡∂∫‡∑í! üòÉ", "‡∑Ñ‡∑ô‡∂Ω‡∑ù!", "‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä üòÄ"])
        sinhala_intro_message = random.choice(
            [
                "‡∂∏‡∂∏ ResBot! üç¥, ‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∂±‡∑ä‡∑Ñ‡∂Ω‡∑ä ‡∂±‡∑í‡∂ª‡∑ä‡∂Ø‡∑ö‡∑Å ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑í ‡∂Ö‡∂≠‡∂ª ‡∂î‡∂∂‡∂ß ‡∑Ä‡∑ô‡∂±‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ä ‡∂∏‡∑è ‡∑Ñ‡∂ª‡∑Ñ‡∑è ‡∑É‡∑í‡∂Ø‡∑î ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö.",
                "‡∂∏‡∂∏ ResBot, ‡∂î‡∂∂‡∑ö AI ‡∂∑‡∑ù‡∂¢‡∂± ‡∑É‡∑Ñ‡∂ö‡∑è‡∂ª. ‡∂∏‡∂∏ ‡∂î‡∂∂‡∂ß ‡∑É‡∑î‡∂Ø‡∑î‡∑É‡∑î ‡∂Ö‡∑Ä‡∂±‡∑ä‡∑Ñ‡∂Ω‡∑ä ‡∑É‡∑ú‡∂∫‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∑É‡∑Ñ ‡∂î‡∂∂ ‡∑Ä‡∑ô‡∂±‡∑î‡∑Ä‡∑ô‡∂±‡∑ä ‡∂ë‡∂∫ ‡∑Ä‡∑ô‡∂±‡∑ä ‡∂ö‡∂ª‡∑Ä‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ã‡∂Ø‡∑Ä‡∑î ‡∂ö‡∂ª‡∂∏‡∑í üåü."
            ]
        )

        is_authenticated = tracker.get_slot(IS_AUTHENTICATED)

        if is_authenticated:
            english_messages = hi_message
            sinhala_messages = sinhala_hi_message
        else:
            english_messages = hi_message + "\n\n" + intro_message
            sinhala_messages = sinhala_hi_message + "\n\n" + sinhala_intro_message

        language = LanguageSelector.get_language(tracker)

        if language == SIN:
            dispatcher.utter_message(text=sinhala_messages)
        else:
            dispatcher.utter_message(text=english_messages)

        return []


class ActionUtterWannaBook(Action):
    def name(self) -> Text:
        return "action_utter_wanna_book"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = [
            "Would you like to reserve a table at a fantastic restaurant? üçΩÔ∏è"
        ]
        sinhala_messages = [
            "High quality ‡∂Ü‡∂¥‡∂± ‡∑Å‡∑è‡∂Ω‡∑è‡∑Ä‡∂ö ‡∂∏‡∑ö‡∑É‡∂∫‡∂ö‡∑ä ‡∑Ä‡∑ô‡∂±‡∑ä‡∂ö‡∂ª‡∑Ä‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í‡∂Ø? üçΩÔ∏è"
        ]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterPleaseRephrase(Action):
    def name(self) -> Text:
        return "action_utter_please_rephrase"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = [
            "I'm sorry, I couldn't understand that. Could you rephrase it?",
            "Sorry I didn't get that. Can you rephrase?",
            "Sorry, I'm not sure I understand. Can you rephrase?"
        ]
        sinhala_messages = [
            "‡∑É‡∂∏‡∑è‡∑Ä‡∑ô‡∂±‡∑ä‡∂±, ‡∂∏‡∂ß ‡∂ë‡∂∫ ‡∂≠‡∑ö‡∂ª‡∑î‡∂∏‡∑ä ‡∂ú‡∂±‡∑ä‡∂± ‡∂∂‡∑ê‡∂ª‡∑í ‡∑Ä‡∑í‡∂∫. ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∑Ä‡∂†‡∂±‡∂∫‡∑ô‡∂±‡∑ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ö‡∑í‡∑Ä ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂Ø?",
            "‡∂ö‡∂´‡∂ú‡∑è‡∂ß‡∑î‡∂∫‡∑í, ‡∂∏‡∂ß ‡∂≠‡∑ö‡∂ª‡∑î‡∂±‡∑ä ‡∂±‡∑ê‡∑Ñ‡∑ê. ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∑Ä‡∂†‡∂±‡∂∫‡∑ô‡∂±‡∑ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ö‡∑í‡∑Ä ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂Ø?"
        ]
        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterGreetAgain(Action):  # not used in any stories
    def name(self) -> Text:
        return "action_utter_greet_again"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["Hi there again!", "Hello again!"]
        sinhala_messages = ["‡∂±‡∑ê‡∑Ä‡∂≠‡∂≠‡∑ä ‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä!"]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterMoodGreatFeedback(Action):
    def name(self) -> Text:
        return "action_utter_mood_great_feedback"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["Cool! üòé", "Nice to hear üòÉ that", "Happy to hear üòä"]
        sinhala_messages = ["‡∂±‡∑í‡∂∫‡∂∏‡∂∫‡∑í.", "‡∂î‡∂∂‡∂ß ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≠‡∑î‡∂ß‡∂ö‡∑ä."]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterMoodUnhappyFeedback(Action):
    def name(self) -> Text:
        return "action_utter_mood_unhappy_feedback"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = [
            "Sorry to hear that, maybe having something will make you feel better.",
            "Hmm, eating something might help you feel better."
        ]

        sinhala_messages = [
            "‡∂î‡∂ö ‡∂Ö‡∂∏‡∂≠‡∂ö ‡∑Ä‡∑ô‡∂±‡∑ä‡∂±‡∂≠‡∑ä ‡∂ë‡∂ö‡∑ä‡∂ö ‡∂∏‡∑ú‡∂±‡∑è‡∑Ñ‡∂ª‡∑í ‡∂ö‡∂∏‡∑î‡∂Ø?.",
            "hmm, ‡∂∏‡∑ú‡∂±‡∑è‡∑Ñ‡∂ª‡∑í ‡∂ö‡∑ë‡∑Ä‡∂±‡∂∏‡∑ä ‡∂î‡∂ö ‡∂∏‡∂ú‡∑Ñ‡∑ê‡∂ª‡∑ô‡∂∫‡∑í ‡∑É‡∂∏‡∑Ñ‡∂ª‡∑Ä‡∑í‡∂ß."
        ]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterEmojiGreatFeedback(Action):
    def name(self) -> Text:
        return "action_utter_emoji_great_feedback"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["üòä", "üòÑ"]
        sinhala_messages = ["üòä", "üòÑ"]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterEmojiMoodUnhappyFeedback(Action):
    def name(self) -> Text:
        return "action_utter_emoji_mood_unhappy_feedback"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["Eating something might help ü§ó", "Eating something might help üòä"]
        sinhala_messages = ["‡∂î‡∂ö ‡∂Ö‡∂∏‡∂≠‡∂ö ‡∑Ä‡∑ô‡∂±‡∑ä‡∂±‡∂≠‡∑ä ‡∂ë‡∂ö‡∑ä‡∂ö ‡∂∏‡∑ú‡∂±‡∑è‡∑Ñ‡∂ª‡∑í ‡∂ö‡∂∏‡∑î‡∂Ø?.", "hmm, ‡∂∏‡∑ú‡∂±‡∑è‡∑Ñ‡∂ª‡∑í ‡∂ö‡∑ë‡∑Ä‡∂±‡∂∏‡∑ä ‡∂î‡∂ö ‡∂∏‡∂ú‡∑Ñ‡∑ê‡∂ª‡∑ô‡∂∫‡∑í ‡∑É‡∂∏‡∑Ñ‡∂ª‡∑Ä‡∑í‡∂ß."]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterThankYou(Action):
    def name(self) -> Text:
        return "action_utter_thank_you"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = [
            "Thank you for using our service. If you need any assistance in the future, feel free to ask."
        ]
        sinhala_messages = [
            "‡∂Ö‡∂¥‡∂ú‡∑ö ‡∑É‡∑ö‡∑Ä‡∑è‡∑Ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂Ω‡∑è‡∂ß ‡∑É‡∑ä‡∂≠‡∑î‡∂≠‡∑í‡∂∫‡∑í.  ‡∂î‡∂∂‡∂ß ‡∂ö‡∑í‡∑É‡∑í‡∂∫‡∂∏‡∑ä ‡∑É‡∑Ñ‡∂∫‡∂ö‡∑ä ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä, ‡∂±‡∑ú‡∂¥‡∑É‡∑î‡∂∂‡∂ß‡∑Ä ‡∂Ö‡∑É‡∂±‡∑ä‡∂±!"
        ]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterWelcome(Action):
    def name(self) -> Text:
        return "action_utter_welcome"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = [
            "You're welcome!",
            "No problem!",
            "Happy to help!",
            "My pleasure!",
            "Anytime!",
            "Always happy to help!"
        ]

        sinhala_messages = [
            "‡∂î‡∂ö ‡∂∏‡∑ú‡∂ö‡∂ö‡∑ä‡∂Ø",
            "‡∂∏‡∑è‡∂ú‡∑ô ‡∂¥‡∑ä‚Äç‡∂ª‡∂±‡∑è‡∂∏‡∂∫‡∂∫‡∑í"
        ]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterGoodbye(Action):
    def name(self) -> Text:
        return "action_utter_goodbye"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["Bye", "Goodbye", "Farewell", "See you later"]

        sinhala_messages = ["‡∂ß‡∂ß‡∑è ‡∂∂‡∑è‡∂∫‡∑í", "‡∂±‡∑ê‡∑Ä‡∂≠ ‡∑Ñ‡∂∏‡∑î‡∑Ä‡∑ô‡∂∏‡∑î"]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterByeSeeYouLater(Action):
    def name(self) -> Text:
        return "action_utter_bye_see_you_later"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["Good Bye. See you later!"]
        sinhala_messages = ["‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä. ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∑Ñ‡∂∏‡∑î‡∑Ä‡∑ô‡∂∏‡∑î!"]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterAskUserName(Action):
    def name(self) -> Text:
        return "action_ask_user_name"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = [
            "May I know your name? (first name is sufficient)"
        ]
        sinhala_messages = [
            "‡∂∏‡∂ß ‡∂î‡∂∂‡∂ú‡∑ö ‡∂±‡∂∏ ‡∂Ø‡∑ê‡∂± ‡∂ú‡∂≠ ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂Ø? (‡∂¥‡∑Ö‡∂∏‡∑î ‡∂±‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∑Ä‡∂≠‡∑ä)"
        ]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterAskUserEmail(Action):
    def name(self) -> Text:
        return "action_ask_user_email"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["Enter your email address."]
        sinhala_messages = ["‡∂î‡∂∂‡∂ú‡∑ö email ‡∂Ω‡∑í‡∂¥‡∑í‡∂±‡∂∫ ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterAskUserPassword(Action):
    def name(self) -> Text:
        return "action_ask_user_password"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["Enter password."]
        sinhala_messages = ["‡∂∏‡∑î‡∂ª‡∂¥‡∂Ø‡∂∫ ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterAskDate(Action):
    def name(self) -> Text:
        return "action_ask_date"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = [
            "When would you like to make the booking? A future date (tomorrow or later) "
            "in the format [YYYY/MM/DD] is preferred",
            "What date do you have in mind for the booking?  A future date (tomorrow or later) "
            "in the format [YYYY/MM/DD] is preferred"
        ]
        sinhala_messages = [
            "‡∂î‡∂∂ ‡∑Ä‡∑ô‡∂±‡∑ä‡∂ö‡∂ª‡∑Ä‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í ‡∂ö‡∑Ä‡∂Ø‡∑è‡∂Ø? ‡∂Ö‡∂±‡∑è‡∂ú‡∂≠ ‡∂Ø‡∑í‡∂±‡∂∫‡∂ö‡∑ä (‡∑Ñ‡∑ô‡∂ß ‡∑Ñ‡∑ù ‡∂¥‡∑É‡∑î‡∑Ä) "
            "[YYYY/MM/DD] ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑ä ‡∑Ä‡∂©‡∑è‡∂≠‡∑ä ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í ‡∑Ä‡∑ö"
            ,

            "‡∂î‡∂∂‡∂ß ‡∑Ä‡∑ô‡∂±‡∑ä‡∂ö‡∂ª‡∑Ä‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂á‡∂≠‡∑í ‡∂Ø‡∑í‡∂±‡∂∫ ‡∂ö‡∑î‡∂∏‡∂ö‡∑ä‡∂Ø? ‡∂Ö‡∂±‡∑è‡∂ú‡∂≠ ‡∂Ø‡∑í‡∂±‡∂∫‡∂ö‡∑ä (‡∑Ñ‡∑ô‡∂ß ‡∑Ñ‡∑ù ‡∂¥‡∑É‡∑î‡∑Ä)"
            "[YYYY/MM/DD] ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑ä ‡∑Ä‡∂©‡∑è‡∂≠‡∑ä ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í ‡∑Ä‡∑ö"
        ]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterAskNumPeople(Action):
    def name(self) -> Text:
        return "action_ask_num_people"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = [
            "May I know the number of people for the booking?",
            "For how many people are you planing to make the reservation?"
        ]
        sinhala_messages = [
            "‡∑Ä‡∑ô‡∂±‡∑ä‡∂ö‡∂ª‡∑Ä‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∂∫‡∑í‡∂±‡∑ä ‡∂ú‡∂´‡∂± ‡∂∏‡∂ß ‡∂Ø‡∑ê‡∂±‡∂ú‡∂≠ ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂Ø?",
            "‡∂î‡∂∂ ‡∂ö‡∑ú‡∂¥‡∂∏‡∂´ ‡∂¥‡∑í‡∂ª‡∑í‡∑É‡∂ö‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∑ô‡∂±‡∑ä‡∂ö‡∂ª‡∑Ä‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∑É‡∑ê‡∂Ω‡∑É‡∑î‡∂∏‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è‡∂Ø?"
        ]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterNoChangesMadeToBooking(Action):
    def name(self) -> Text:
        return "action_utter_no_changes_made_to_booking"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["No changes were made to your booking"]
        sinhala_messages = ["‡∂î‡∂∂‡∑ö ‡∑Ä‡∑ô‡∂±‡∑ä‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂ö‡∑í‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑ô‡∂±‡∑É‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î ‡∂ö‡∂ª ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠"]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterAskFavoriteCuisines(Action):
    def name(self) -> Text:
        return "action_utter_ask_favorite_cuisines"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = [
            "What are your favorite cuisines? You can provide multiple cuisines, like Italian, Chinese, "
            "Indian, or Mexican."]
        sinhala_messages = [
            "‡∂î‡∂∂‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∂≠‡∂∏ ‡∂Ü‡∑Ñ‡∑è‡∂ª ‡∑Ä‡∂ª‡∑ä‡∂ú ‡∂∏‡∑ú‡∂±‡∑Ä‡∑è‡∂Ø? ‡∂î‡∂∂‡∂ß Italian, Chinese, Indian, ‡∑Ñ‡∑ù Mexican ‡∑Ä‡∑ê‡∂±‡∑í ‡∑Ä‡∑í‡∑Ä‡∑í‡∂∞ ‡∂Ü‡∑Ñ‡∑è‡∂ª ‡∑Ä‡∂ª‡∑ä‡∂ú ‡∑É‡∑ê‡∂¥‡∂∫‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö"
        ]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


# all below have not been used in any stories


class ActionUtterLoginToContinue(Action):  # not used in any story
    def name(self) -> Text:
        return "action_utter_login_to_continue"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["Please login to continue."]
        sinhala_messages = ["‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂â‡∂Ø‡∑í‡∂ª‡∑í‡∂∫‡∂ß ‡∂∫‡∑è‡∂∏‡∂ß log ‡∑Ä‡∂±‡∑ä‡∂±."]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterAlreadyLoggedIn(Action):  # not used in any story
    def name(self) -> Text:
        return "action_utter_already_logged_in"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["You are already logged in."]
        sinhala_messages = ["‡∂î‡∂∂ ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂Ω‡∑ú‡∂ú‡∑í‡∂±‡∑ä ‡∑Ä‡∑ì ‡∂á‡∂≠."]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterAskCancelAnotherBooking(Action):  # not used in any story
    def name(self) -> Text:
        return "action_utter_ask_cancel_another_booking"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["Do you want to cancel another booking?"]
        sinhala_messages = ["‡∂î‡∂∂‡∂ß ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∑Ä‡∑ô‡∂±‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ö‡∑ä ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂Ø?"]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterAskNewBookingDate(Action):  # not used in any story
    def name(self) -> Text:
        return "action_utter_ask_new_booking_date"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["What is the new date for the booking?"]
        sinhala_messages = ["Booking ‡∂ë‡∂ö ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂±‡∑Ä ‡∂Ø‡∑í‡∂±‡∂∫ ‡∂ö‡∑î‡∂∏‡∂ö‡∑ä‡∂Ø?"]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterAskChangeAnotherBooking(Action):  # not used in any story
    def name(self) -> Text:
        return "action_utter_ask_change_another_booking"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["Do you want to change another booking?"]
        sinhala_messages = ["‡∂î‡∂∂‡∂ß ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä booking ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂Ø?"]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterAskTryAgain(Action):  # not used in any story
    def name(self) -> Text:
        return "action_utter_ask_try_again"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = [
            "Would you like to try again?",
            "Do you want to try searching again?"
        ]
        sinhala_messages = [
            "‡∂î‡∂∂ ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í‡∂Ø?",
            "‡∂î‡∂∂‡∂ß ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∑É‡∑ô‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂Ø?"
        ]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterAskDifferentDate(Action):  # not used in any story
    def name(self) -> Text:
        return "action_utter_ask_different_date"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = [
            "Would you like to select a different date for the booking?",
            "Do you want to choose another date for the reservation?"
        ]
        sinhala_messages = [
            "‡∂î‡∂∂ booking ‡∂ë‡∂ö ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂Ø‡∑í‡∂±‡∂∫‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í‡∂Ø?",
            "‡∂î‡∂∂‡∂ß booking ‡∂ë‡∂ö ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂Ø‡∑í‡∂±‡∂∫‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂Ø?"
        ]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterAskDifferentRestaurant(Action):  # not used in any story
    def name(self) -> Text:
        return "action_utter_ask_different_restaurant"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = [
            "Would you like to choose a different restaurant?",
            "Do you want to look for another restaurant?"
        ]
        sinhala_messages = [
            "‡∂î‡∂∂ ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂Ö‡∑Ä‡∂±‡∑ä‡∑Ñ‡∂Ω‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í‡∂Ø?",
            "‡∂î‡∂∂‡∂ß ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂Ö‡∑Ä‡∂±‡∑ä‡∑Ñ‡∂Ω‡∂ö‡∑ä ‡∑É‡∑ú‡∂∫‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂Ø?"
        ]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterBookingConfirmation(Action):  # not used in any story
    def name(self) -> Text:
        return "action_utter_booking_confirmation"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        restaurant = tracker.get_slot("restaurant")
        booking_date = tracker.get_slot("date")
        num_people = tracker.get_slot("num_people")

        english_messages = [
            f"Your booking at {restaurant['name']} on {booking_date} for {num_people} people has been confirmed.",
            f"Congratulations! Your reservation at {restaurant['name']} for {num_people} people on {booking_date} "
            f"is confirmed."
        ]
        sinhala_messages = [
            f"‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∂∫‡∑í‡∂±‡∑ä {num_people} ‡∂ö‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è {booking_date} ‡∂Ø‡∑í‡∂± {restaurant['name']} ‡∂î‡∂∂‡∑ö booking ‡∂ë‡∂ö ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑Ö‡∑ô‡∂∏‡∑í.",

            f"‡∑É‡∑î‡∂∂ ‡∂¥‡∑ê‡∂≠‡∑î‡∂∏‡∑ä! {booking_date} ‡∂Ø‡∑í‡∂± {num_people} ‡∂Ø‡∑ô‡∂±‡∑ô‡∂ö‡∑î ‡∑É‡∂≥‡∑Ñ‡∑è {restaurant['name']} ‡∑Ñ‡∑í ‡∂î‡∂∂‡∂ú‡∑ö booking ‡∂ë‡∂ö"
            f"‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑Ö‡∑ô‡∂∏‡∑í."
        ]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterProcessingTheRequest(Action):  # not used in any story
    def name(self) -> Text:
        return "action_utter_processing_the_request"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = [
            "Let me check",
            "Sure!",
            "I'll see what I can find out.",
            "I'll check and get back to you."
        ]
        sinhala_messages = [
            "‡∂∏‡∑è ‡∂ë‡∂∫ ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±‡∂∏‡∑ä ."
        ]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


class ActionUtterAskRegisteredUser(Action):  # not used in any story
    def name(self) -> Text:
        return "action_utter_ask_registered_user"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        english_messages = ["Are you a registered user?"]
        sinhala_messages = ["‡∂î‡∂∂ ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑ô‡∂ö‡∑ä‡∂Ø?"]

        choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker)

        return []


def choose_and_send_message(dispatcher, english_messages, sinhala_messages, tracker):

    language = LanguageSelector.get_language(tracker)
    
    if language == SIN:
        message = random.choice(sinhala_messages)
    else:
        message = random.choice(english_messages)
    dispatcher.utter_message(text=message)
