# -*- coding: utf-8 -*-
"""recomendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W14EhRLV9BMxSyCWYOlDLXZdhWJpFZff
"""

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from textblob import TextBlob


def calculate_sentiment_score(sentence):
    blob = TextBlob(sentence)
    return blob.sentiment.polarity


def get_rec_dfs(df_sent):
    df_user_res_grp = df_sent.groupby(["business_id", "user_id"]).apply(lambda x: x[x != 0].mean(numeric_only=True))
    df_user_res_grp.reset_index(inplace=True)
    df_user_res_grp.fillna(0.0, inplace=True)

    df_sent_user = df_sent.drop(columns=["business_id"])
    df_user_grp = df_sent_user.groupby(["user_id"]).apply(lambda x: x.abs()[x != 0].mean(numeric_only=True))
    df_user_grp.reset_index(inplace=True)
    df_user_grp.fillna(0.0, inplace=True)

    df_sent_res = df_sent.drop(columns=["user_id"])
    df_res_grp = df_sent_res.groupby(["business_id"]).apply(lambda x: x[x != 0].mean(numeric_only=True))
    df_res_grp.reset_index(inplace=True)
    df_res_grp.fillna(0.0, inplace=True)

    return df_user_res_grp, df_user_grp, df_res_grp


def collaborative_filtering(target_user, df_user_res_grp, df_user_grp, features, similarity_threshold=0.7):
    selected_user_df = df_user_grp[df_user_grp['user_id'] == target_user]
    sel_usr_zro_cols = selected_user_df.columns[selected_user_df.eq(0).any()].tolist()
    sel_usr_features = selected_user_df[features].columns[selected_user_df[features].any()]

    selected_user_features = df_user_grp.loc[df_user_grp['user_id'] == target_user, sel_usr_features].values

    user_features = df_user_grp[sel_usr_features].values

    user_similarity_matrix = cosine_similarity(selected_user_features, user_features)

    similarity_df = pd.DataFrame({
        'user_id': df_user_grp['user_id'],
        'similarity_score': user_similarity_matrix.flatten()
    })
    similarity_df = similarity_df.sort_values('similarity_score', ascending=False)

    similarity_df = similarity_df.drop(similarity_df[similarity_df['user_id'] == target_user].index)

    similar_users = similarity_df[similarity_df['similarity_score'] > similarity_threshold]

    filtered_user_ids = similar_users['user_id'].tolist()

    df_user_res_wt_sim = pd.merge(df_user_res_grp, similar_users, on='user_id')
    df_user_res_wt_sim = df_user_res_wt_sim.drop(columns=sel_usr_zro_cols)
    df_user_res_wt_sim[sel_usr_features] = df_user_res_wt_sim[sel_usr_features].mul(
        df_user_res_wt_sim['similarity_score'], axis=0)

    aggregated_ratings = \
    df_user_res_wt_sim[df_user_res_wt_sim['user_id'].isin(filtered_user_ids)].groupby('business_id')[
        sel_usr_features].apply(lambda x: x[x != 0].mean())
    aggregated_ratings.fillna(0.0, inplace=True)

    predicted_ratings_scr = aggregated_ratings.apply(lambda x: x[x != 0].mean(), axis=1)
    predicted_ratings_scr = predicted_ratings_scr.dropna()

    normalized_ratings = (predicted_ratings_scr - predicted_ratings_scr.min()) / (
                predicted_ratings_scr.max() - predicted_ratings_scr.min()) * 4 + 1

    all_businesses = normalized_ratings.sort_values(ascending=False)

    df_cf = pd.DataFrame({'business_id': all_businesses.index, 'cf_predicted_rating': all_businesses.values})

    return df_cf


def content_based_filtering(df_user_grp, df_res_grp, target_user):
    selected_user_preferences = df_user_grp.loc[df_user_grp['user_id'] == target_user].drop('user_id', axis=1)

    similarity_scores = cosine_similarity(selected_user_preferences, df_res_grp.drop('business_id', axis=1))

    df_cbf = pd.DataFrame({
        'business_id': df_res_grp['business_id'],
        'similarity_score': similarity_scores.flatten()
    })

    min_score = df_cbf['similarity_score'].min()
    max_score = df_cbf['similarity_score'].max()

    df_cbf['cbf_predicted_rating'] = 1 + (df_cbf['similarity_score'] - min_score) * (5 - 1) / (max_score - min_score)
    df_cbf = df_cbf.drop('similarity_score', axis=1)

    df_cbf = df_cbf.sort_values('cbf_predicted_rating', ascending=False).reset_index(drop=True)

    return df_cbf


def hybrid_recommendation(colab_df, content_df, content_weight, collab_filtering_weight, n_recommendations):
    hy_df = pd.merge(content_df, colab_df, on='business_id')

    hy_df['weighted_hybrid_score'] = hy_df['cbf_predicted_rating'] * content_weight + hy_df[
        'cf_predicted_rating'] * collab_filtering_weight

    ranked_business_ids = hy_df.sort_values(by='weighted_hybrid_score', ascending=False)['business_id'].tolist()
    return ranked_business_ids


def recommendation(user_id, df, n_restaurants=10):
    df_sent = df.copy()

    feature_name_list = list(eval(df_sent['feature_summaries'][0]).keys())

    df_sent["sentiment_scores"] = df_sent["feature_summaries"].apply(
        lambda row: {feature: calculate_sentiment_score(sentence) for feature, sentence in eval(row).items()})
    sentiment_scores_df = pd.DataFrame(df_sent["sentiment_scores"].tolist())
    df_sent = pd.concat([df_sent, sentiment_scores_df], axis=1)
    df_sent = df_sent.drop(columns=['review', 'feature_summaries', 'sentiment_scores', 'categories'])

    df_user_res_feature_scr, df_user_feature_scr, df_res_feature_scr = get_rec_dfs(df_sent)

    cf_df = collaborative_filtering(target_user=user_id, df_user_res_grp=df_user_res_feature_scr,
                                    df_user_grp=df_user_feature_scr, features=feature_name_list,
                                    similarity_threshold=0.7)
    cbf_df = content_based_filtering(df_user_grp=df_user_feature_scr, df_res_grp=df_res_feature_scr,
                                     target_user=user_id)

    ranked_rest_ids = hybrid_recommendation(colab_df=cf_df, content_df=cbf_df, content_weight=0.5,
                                            collab_filtering_weight=0.5, n_recommendations=n_restaurants)

    return ranked_rest_ids


# function to get recommendation by passing user id and number of restaurants to recommend
def get_business_ids(user_id, n_restaurants=10):
    # check if recommendations stored is not derive and store

    df = pd.read_csv(
        '/Users/kalpafernando/PycharmProjects/resbot/submodules/other_modules/top_60_reviews_data_preprocessed.csv')
    # user_id = "iewIMUeTeCYW7VZQvifP0g"
    user_id = "V1AMJ5p050XTl2PZB13YfQ"
    result = recommendation(user_id, df, n_restaurants)
    return result


print(get_business_ids("iewIMUeTeCYW7VZQvifP0g", 10))
